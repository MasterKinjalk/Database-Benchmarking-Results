{
    "set_operations": [
        "(     SELECT c.Symbol, c.Name     FROM Companies c     JOIN CashFlow cf ON c.Symbol = cf.Symbol     WHERE YEAR(cf.Date) = 2018     GROUP BY c.Symbol, c.Name     HAVING          SUM(cf.OperatingCashFlow) > 0         AND         SUM(cf.OperatingCashFlow) - SUM(cf.CapitalExpenditures) > 0 ) EXCEPT (     (         SELECT c.Symbol, c.Name         FROM Companies c         JOIN CashFlow cf ON c.Symbol = cf.Symbol         WHERE YEAR(cf.Date) = 2018         GROUP BY c.Symbol, c.Name         HAVING SUM(cf.CashflowFromInvestment) >= 0     )     UNION     (         SELECT c.Symbol, c.Name         FROM Companies c         JOIN CashFlow cf ON c.Symbol = cf.Symbol         WHERE YEAR(cf.Date) = 2018         GROUP BY c.Symbol, c.Name         HAVING SUM(cf.CashflowFromFinancing) >= 0     ) )         ",
        "(     SELECT c.Symbol, c.Name     FROM Companies c     JOIN Financials f ON c.Symbol = f.Symbol     WHERE YEAR(f.Date) IN (2017, 2018)     GROUP BY c.Symbol, c.Name     HAVING          SUM(CASE WHEN YEAR(f.Date) = 2018 THEN f.NetIncome ELSE 0 END) <          SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.NetIncome ELSE 0 END) ) INTERSECT (     SELECT c.Symbol, c.Name     FROM Companies c     JOIN Financials f ON c.Symbol = f.Symbol     WHERE YEAR(f.Date) IN (2017, 2018)     GROUP BY c.Symbol, c.Name     HAVING          SUM(CASE WHEN YEAR(f.Date) = 2018 THEN f.TotalRevenue ELSE 0 END) >          SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.TotalRevenue ELSE 0 END) ) INTERSECT (     SELECT c.Symbol, c.Name     FROM Companies c     JOIN Financials f ON c.Symbol = f.Symbol     WHERE YEAR(f.Date) IN (2017, 2018)     GROUP BY c.Symbol, c.Name     HAVING          SUM(CASE WHEN YEAR(f.Date) = 2018 THEN f.OperatingIncome ELSE 0 END) >          SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.OperatingIncome ELSE 0 END) )         ",
        "(     SELECT c.Symbol, c.Name     FROM Companies c     JOIN Financials f ON c.Symbol = f.Symbol     WHERE YEAR(f.Date) BETWEEN 2016 AND 2018     GROUP BY c.Symbol, c.Name     HAVING          MIN(CASE WHEN YEAR(f.Date) = 2018 THEN f.NetIncome END) > MIN(CASE WHEN YEAR(f.Date) = 2017 THEN f.NetIncome END)         AND MIN(CASE WHEN YEAR(f.Date) = 2017 THEN f.NetIncome END) > MIN(CASE WHEN YEAR(f.Date) = 2016 THEN f.NetIncome END)         AND MIN(CASE WHEN YEAR(f.Date) = 2018 THEN f.TotalRevenue END) > MIN(CASE WHEN YEAR(f.Date) = 2017 THEN f.TotalRevenue END)         AND MIN(CASE WHEN YEAR(f.Date) = 2017 THEN f.TotalRevenue END) > MIN(CASE WHEN YEAR(f.Date) = 2016 THEN f.TotalRevenue END) ) EXCEPT (     SELECT c.Symbol, c.Name     FROM Companies c     JOIN CashFlow cf ON c.Symbol = cf.Symbol     WHERE YEAR(cf.Date) BETWEEN 2016 AND 2018     GROUP BY c.Symbol, c.Name     HAVING          MIN(CASE WHEN YEAR(cf.Date) = 2018 THEN cf.OperatingCashFlow END) > MIN(CASE WHEN YEAR(cf.Date) = 2017 THEN cf.OperatingCashFlow END)         AND MIN(CASE WHEN YEAR(cf.Date) = 2017 THEN cf.OperatingCashFlow END) > MIN(CASE WHEN YEAR(cf.Date) = 2016 THEN cf.OperatingCashFlow END) )         ",
        "(     SELECT c.Symbol, c.Name     FROM Companies c     JOIN Financials f ON c.Symbol = f.Symbol     JOIN CashFlow cf ON c.Symbol = cf.Symbol     JOIN DailyStockPrices d ON c.Symbol = d.Symbol     WHERE YEAR(f.Date) = 2018 AND YEAR(cf.Date) = 2018 AND d.Date = '2018-12-31'     GROUP BY c.Symbol, c.Name     HAVING          SUM(f.NetIncome) > 0         AND         SUM(cf.OperatingCashFlow) > 0         AND         SUM(cf.OperatingCashFlow) - SUM(cf.CapitalExpenditures) < 0         AND         AVG(d.ClosePrice) / (SUM(f.NetIncome) / COUNT(DISTINCT f.Date)) > 50 ) INTERSECT (     SELECT c.Symbol, c.Name     FROM Companies c )         "
    ],
    "group_by": [
        "WITH YearlyMargins AS (     SELECT c.Industry, c.Symbol, c.Name AS CompanyName, YEAR(f.Date) AS Year,         CASE WHEN SUM(f.TotalRevenue) > 0 THEN SUM(f.OperatingIncome) / SUM(f.TotalRevenue) ELSE NULL END AS OperatingMargin,         CASE WHEN SUM(f.TotalRevenue) > 0 THEN SUM(f.NetIncome) / SUM(f.TotalRevenue) ELSE NULL END AS NetProfitMargin     FROM Companies c     JOIN Financials f ON c.Symbol = f.Symbol     WHERE YEAR(f.Date) BETWEEN 2016 AND 2018     GROUP BY c.Industry, c.Symbol, c.Name, YEAR(f.Date) ) SELECT Year, Industry,     MAX(CASE WHEN rnk_om = 1 THEN CompanyName END) AS HighestOperatingMarginCompany,     MAX(CASE WHEN rnk_om = 1 THEN OperatingMargin END) AS HighestOperatingMargin,     MAX(CASE WHEN rnk_npm = 1 THEN CompanyName END) AS HighestNetProfitMarginCompany,     MAX(CASE WHEN rnk_npm = 1 THEN NetProfitMargin END) AS HighestNetProfitMargin FROM (     SELECT Industry, Symbol, CompanyName, Year, OperatingMargin, NetProfitMargin,         ROW_NUMBER() OVER (PARTITION BY Industry, Year ORDER BY OperatingMargin DESC) AS rnk_om,         ROW_NUMBER() OVER (PARTITION BY Industry, Year ORDER BY NetProfitMargin DESC) AS rnk_npm     FROM YearlyMargins     WHERE OperatingMargin IS NOT NULL AND NetProfitMargin IS NOT NULL ) AS RankedData GROUP BY Year, Industry         ",
        "WITH IndustryAverageRevenue AS ( SELECT c.Industry, YEAR(f.Date) AS Year, AVG(f.TotalRevenue) AS AvgRevenue FROM Companies c JOIN Financials f ON c.Symbol = f.Symbol WHERE YEAR(f.Date) BETWEEN 2016 AND 2018 GROUP BY c.Industry, YEAR(f.Date) ), MinRevenuePerYear AS ( SELECT c.Industry, MIN(CASE WHEN YEAR(f.Date) = 2016 THEN f.TotalRevenue END) AS MinRevenue2016, MIN(CASE WHEN YEAR(f.Date) = 2017 THEN f.TotalRevenue END) AS MinRevenue2017, MIN(CASE WHEN YEAR(f.Date) = 2018 THEN f.TotalRevenue END) AS MinRevenue2018 FROM Companies c JOIN Financials f ON c.Symbol = f.Symbol WHERE YEAR(f.Date) BETWEEN 2016 AND 2018 GROUP BY c.Industry ) SELECT c.Industry, (MAX(CASE WHEN YEAR(f.Date) = 2018 THEN f.TotalRevenue END) - MAX(CASE WHEN YEAR(f.Date) = 2016 THEN f.TotalRevenue END)) / MAX(CASE WHEN YEAR(f.Date) = 2016 THEN f.TotalRevenue END) * 100 AS RevenueGrowthRate, mrpy.MinRevenue2016, mrpy.MinRevenue2017, mrpy.MinRevenue2018, iar2016.AvgRevenue AS AvgRevenue2016, iar2017.AvgRevenue AS AvgRevenue2017, iar2018.AvgRevenue AS AvgRevenue2018 FROM Companies c JOIN Financials f ON c.Symbol = f.Symbol JOIN MinRevenuePerYear mrpy ON c.Industry = mrpy.Industry JOIN IndustryAverageRevenue iar2016 ON c.Industry = iar2016.Industry AND 2016 = iar2016.Year JOIN IndustryAverageRevenue iar2017 ON c.Industry = iar2017.Industry AND 2017 = iar2017.Year JOIN IndustryAverageRevenue iar2018 ON c.Industry = iar2018.Industry AND 2018 = iar2018.Year WHERE YEAR(f.Date) BETWEEN 2016 AND 2018 GROUP BY c.Industry, mrpy.MinRevenue2016, mrpy.MinRevenue2017, mrpy.MinRevenue2018, iar2016.AvgRevenue, iar2017.AvgRevenue, iar2018.AvgRevenue HAVING mrpy.MinRevenue2016 > iar2016.AvgRevenue AND mrpy.MinRevenue2017 > iar2017.AvgRevenue AND mrpy.MinRevenue2018 > iar2018.AvgRevenue ORDER BY RevenueGrowthRate DESC LIMIT 5",
        "SELECT c.Symbol, c.Name, AVG(f.NetIncome / bs.TotalEquity) AS AverageROE FROM Companies c JOIN Financials f ON c.Symbol = f.Symbol JOIN BalanceSheet bs ON c.Symbol = bs.Symbol AND f.Date = bs.Date WHERE f.Date >= (CURDATE() - INTERVAL '3' YEAR) GROUP BY c.Symbol, c.Name HAVING AVG(f.NetIncome / bs.TotalEquity) > 0.15         ",
        "SELECT c.Symbol, c.Name, c.Sector, AVG(d.HighPrice - d.LowPrice) AS AverageDailyVolatility FROM Companies c JOIN DailyStockPrices d ON c.Symbol = d.Symbol WHERE d.Date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY c.Symbol, c.Name, c.Sector HAVING AVG(d.HighPrice - d.LowPrice) = (     SELECT MAX(avg_volatility)     FROM (         SELECT AVG(d2.HighPrice - d2.LowPrice) AS avg_volatility         FROM Companies c2         JOIN DailyStockPrices d2 ON c2.Symbol = d2.Symbol         WHERE c2.Sector = c.Sector AND d2.Date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)         GROUP BY c2.Symbol     ) AS sector_volatility )         ",
        "SELECT Symbol, Name, Industry, AverageGrowthRate FROM (     SELECT c.Symbol, c.Name, c.Industry, AVG((f.TotalRevenue - prev_revenue.TotalRevenue) / prev_revenue.TotalRevenue) AS AverageGrowthRate,            ROW_NUMBER() OVER (PARTITION BY c.Industry ORDER BY AVG((f.TotalRevenue - prev_revenue.TotalRevenue) / prev_revenue.TotalRevenue) DESC) AS RowNum     FROM Companies c     JOIN Financials f ON c.Symbol = f.Symbol     JOIN Financials prev_revenue ON c.Symbol = prev_revenue.Symbol AND f.Date = DATE_ADD(prev_revenue.Date, INTERVAL 1 YEAR)     WHERE f.Date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND prev_revenue.Date >= DATE_SUB(CURDATE(), INTERVAL 4 YEAR)     GROUP BY c.Symbol, c.Name, c.Industry ) AS ranked_companies WHERE RowNum <= 5         "
    ],
    "aggregations": [
        "SELECT c.Symbol, c.Name,      (SUM(CASE WHEN YEAR(f.Date) = 2018 THEN f.NetIncome ELSE 0 END) -       SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.NetIncome ELSE 0 END)) /      NULLIF(SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.NetIncome ELSE 0 END), 0) * 100 AS NetIncomeGrowthRate,     (SUM(CASE WHEN YEAR(f.Date) = 2018 THEN f.TotalRevenue ELSE 0 END) -       SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.TotalRevenue ELSE 0 END)) /      NULLIF(SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.TotalRevenue ELSE 0 END), 0) * 100 AS RevenueGrowthRate,     (SUM(CASE WHEN YEAR(f.Date) = 2018 THEN f.OperatingIncome ELSE 0 END) -       SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.OperatingIncome ELSE 0 END)) /      NULLIF(SUM(CASE WHEN YEAR(f.Date) = 2017 THEN f.OperatingIncome ELSE 0 END), 0) * 100 AS OperatingIncomeGrowthRate FROM Companies c JOIN Financials f ON c.Symbol = f.Symbol GROUP BY c.Symbol, c.Name         ",
        "SELECT c.Symbol, c.Name,      SUM(cf.OperatingCashFlow) AS OperatingCashFlow,     SUM(cf.CapitalExpenditures) AS CapitalExpenditures,     SUM(cf.OperatingCashFlow) - SUM(cf.CapitalExpenditures) AS FreeCashFlow FROM Companies c JOIN CashFlow cf ON c.Symbol = cf.Symbol JOIN (     SELECT Symbol, MAX(Date) AS MaxDate     FROM CashFlow     WHERE Date <= '2018-12-31'     GROUP BY Symbol ) mcf ON cf.Symbol = mcf.Symbol AND cf.Date >= (mcf.MaxDate - INTERVAL '3' MONTH) GROUP BY c.Symbol, c.Name ORDER BY OperatingCashFlow DESC LIMIT 5         ",
        "SELECT c.Symbol, c.Name, c.Sector, c.Industry, AVG(d.Volume) AS AvgDailyVolume FROM Companies c JOIN DailyStockPrices d ON c.Symbol = d.Symbol JOIN (     SELECT Symbol, MAX(Date) AS MaxDate     FROM DailyStockPrices     WHERE Date <= '2018-12-31'     GROUP BY Symbol ) md ON d.Symbol = md.Symbol AND d.Date >= (md.MaxDate - INTERVAL '30' DAY) GROUP BY c.Symbol, c.Name, c.Sector, c.Industry         ",
        "SELECT c.Symbol, c.Name, SUM(f.TotalRevenue) AS TotalRevenue,      SUM(f.OperatingIncome) AS TotalOperatingIncome, SUM(f.NetIncome) AS TotalNetIncome FROM Companies c JOIN Financials f ON c.Symbol = f.Symbol JOIN (     SELECT Symbol, MAX(Date) AS MaxDate     FROM Financials     WHERE Date <= '2018-12-31'     GROUP BY Symbol ) mf ON f.Symbol = mf.Symbol AND f.Date >= DATE_SUB(mf.MaxDate, INTERVAL 1 YEAR) GROUP BY c.Symbol, c.Name ORDER BY TotalRevenue DESC LIMIT 1         "
    ],
    "joins": [
        "WITH MaxCashFlowDate AS ( SELECT Symbol, MAX(Date) AS MaxDate FROM CashFlow GROUP BY Symbol ), MaxStockPriceDate AS ( SELECT Symbol, MAX(Date) AS MaxDate FROM DailyStockPrices GROUP BY Symbol ), MaxFinancialsDate AS ( SELECT Symbol, MAX(Date) AS MaxDate FROM Financials GROUP BY Symbol ), RankedCompanies AS ( SELECT c.Symbol, c.Name, c.Industry, cf.OperatingCashFlow, ROW_NUMBER() OVER (PARTITION BY c.Industry ORDER BY cf.OperatingCashFlow DESC) AS rnk_desc, ROW_NUMBER() OVER (PARTITION BY c.Industry ORDER BY cf.OperatingCashFlow ASC) AS rnk_asc FROM Companies c JOIN CashFlow cf ON c.Symbol = cf.Symbol JOIN MaxCashFlowDate mcf ON cf.Symbol = mcf.Symbol AND cf.Date = mcf.MaxDate ) SELECT rc.Symbol, rc.Name, rc.Industry, rc.OperatingCashFlow, dsp.ClosePrice, f.TotalRevenue, f.NetIncome FROM RankedCompanies rc JOIN DailyStockPrices dsp ON rc.Symbol = dsp.Symbol JOIN MaxStockPriceDate mspd ON dsp.Symbol = mspd.Symbol AND dsp.Date = mspd.MaxDate JOIN Financials f ON rc.Symbol = f.Symbol JOIN MaxFinancialsDate mfd ON f.Symbol = mfd.Symbol AND f.Date = mfd.MaxDate WHERE rc.rnk_desc = 1 OR rc.rnk_asc = 1",
        "SELECT Symbol, Name, Industry, AverageVolume, PERatio, ROE FROM (     SELECT c.Symbol, c.Name, c.Industry, AVG(d.Volume) AS AverageVolume,            d.ClosePrice / f.NetIncome AS PERatio,            f.NetIncome / bs.TotalEquity AS ROE,            ROW_NUMBER() OVER (PARTITION BY c.Industry ORDER BY AVG(d.Volume) DESC) AS RowNum     FROM Companies c     JOIN DailyStockPrices d ON c.Symbol = d.Symbol     JOIN Financials f ON c.Symbol = f.Symbol     JOIN BalanceSheet bs ON c.Symbol = bs.Symbol AND f.Date = bs.Date     WHERE d.Date >= (CURDATE() - INTERVAL '1' YEAR)       AND f.Date = (SELECT MAX(Date) FROM Financials)       AND bs.Date = (SELECT MAX(Date) FROM BalanceSheet)     GROUP BY c.Symbol, c.Name, c.Industry, d.ClosePrice, f.NetIncome, bs.TotalEquity ) AS ranked_companies WHERE RowNum <= 3",
        "SELECT c.Industry, c.Name, b.TotalLiabilities / b.TotalEquity AS DebtToEquityRatio, cf.CashflowFromFinancing FROM Companies c JOIN BalanceSheet b ON c.Symbol = b.Symbol JOIN CashFlow cf ON c.Symbol = cf.Symbol JOIN (     SELECT Industry, MAX(b.TotalLiabilities / b.TotalEquity) AS MaxDebtToEquityRatio     FROM Companies c     JOIN BalanceSheet b ON c.Symbol = b.Symbol     GROUP BY Industry ) AS m ON c.Industry = m.Industry AND b.TotalLiabilities / b.TotalEquity = m.MaxDebtToEquityRatio WHERE b.Date = (SELECT MAX(Date) FROM BalanceSheet WHERE Symbol = c.Symbol) AND cf.Date = (SELECT MAX(Date) FROM CashFlow WHERE Symbol = c.Symbol)         ",
        "SELECT c.Symbol, c.Name,         d.AvgClosePrice AS AverageClosePrice,         d.TotalVolume,        f.TotalRevenue, f.NetIncome,         bs.TotalAssets, bs.TotalLiabilities FROM Companies c JOIN (   SELECT Symbol, AVG(ClosePrice) AS AvgClosePrice, SUM(Volume) AS TotalVolume   FROM DailyStockPrices   WHERE Date >= DATE_SUB((SELECT MAX(Date) FROM DailyStockPrices), INTERVAL 30 DAY)   GROUP BY Symbol ) d ON c.Symbol = d.Symbol JOIN (   SELECT Symbol, TotalRevenue, NetIncome   FROM Financials   WHERE Date = (SELECT MAX(Date) FROM Financials) ) f ON c.Symbol = f.Symbol JOIN (   SELECT Symbol, TotalAssets, TotalLiabilities   FROM BalanceSheet   WHERE Date = (SELECT MAX(Date) FROM BalanceSheet) ) bs ON c.Symbol = bs.Symbol         "
    ],
    "nested": [
        "SELECT c.Symbol, c.Name, CashFlowToDebt.Ratio AS CashFlowToDebtRatio FROM Companies c JOIN (     SELECT cf.Symbol, SUM(cf.OperatingCashFlow) / (SUM(bs.LongTermDebt) + SUM(bs.ShortTermDebt)) AS Ratio     FROM CashFlow cf     JOIN BalanceSheet bs ON cf.Symbol = bs.Symbol AND cf.Date = bs.Date     GROUP BY cf.Symbol ) AS CashFlowToDebt ON c.Symbol = CashFlowToDebt.Symbol ORDER BY CashFlowToDebt.Ratio DESC LIMIT 10         ",
        "SELECT c.Symbol, c.Name, c.Industry, (Debt.Amount / Equity.Amount) AS DebtToEquity FROM Companies c JOIN (     SELECT Symbol, (LongTermDebt + ShortTermDebt) AS Amount     FROM BalanceSheet     WHERE Date = (         SELECT MAX(Date)         FROM BalanceSheet         WHERE Symbol = BalanceSheet.Symbol     ) ) AS Debt ON c.Symbol = Debt.Symbol JOIN (     SELECT Symbol, TotalEquity AS Amount     FROM BalanceSheet     WHERE Date = (         SELECT MAX(Date)         FROM BalanceSheet         WHERE Symbol = BalanceSheet.Symbol     ) ) AS Equity ON c.Symbol = Equity.Symbol WHERE (Debt.Amount / Equity.Amount) > (     SELECT AVG(DebtToEquity)     FROM (         SELECT c2.Symbol, (Debt2.Amount / Equity2.Amount) AS DebtToEquity         FROM Companies c2         JOIN (             SELECT Symbol, (LongTermDebt + ShortTermDebt) AS Amount             FROM BalanceSheet             WHERE Date = (                 SELECT MAX(Date)                 FROM BalanceSheet                 WHERE Symbol = BalanceSheet.Symbol             )         ) AS Debt2 ON c2.Symbol = Debt2.Symbol         JOIN (             SELECT Symbol, TotalEquity AS Amount             FROM BalanceSheet             WHERE Date = (                 SELECT MAX(Date)                 FROM BalanceSheet                 WHERE Symbol = BalanceSheet.Symbol             )         ) AS Equity2 ON c2.Symbol = Equity2.Symbol         WHERE c2.Industry = c.Industry     ) AS t )         ",
        "SELECT c.Symbol, c.Name,      ((CurrentIncome.Amount - PreviousIncome.Amount) / PreviousIncome.Amount) AS NetIncomeGrowth FROM Companies c JOIN (     SELECT Symbol, SUM(NetIncome) AS Amount     FROM Financials     WHERE Date BETWEEN (CURDATE() - INTERVAL '1' YEAR) AND CURDATE()     GROUP BY Symbol ) AS CurrentIncome ON c.Symbol = CurrentIncome.Symbol JOIN (     SELECT Symbol, SUM(NetIncome) AS Amount     FROM Financials     WHERE Date BETWEEN (CURDATE() - INTERVAL '3' YEAR) AND (CURDATE() - INTERVAL '2' YEAR)     GROUP BY Symbol ) AS PreviousIncome ON c.Symbol = PreviousIncome.Symbol WHERE PreviousIncome.Amount != 0 ORDER BY NetIncomeGrowth DESC LIMIT 10         ",
        "SELECT c.Symbol, c.Name, c.Industry, (Price.Amount / Earnings.Amount) AS PERatio FROM Companies c JOIN (     SELECT Symbol, ClosePrice AS Amount     FROM DailyStockPrices     WHERE Date = (         SELECT MAX(Date)         FROM DailyStockPrices         WHERE Symbol = DailyStockPrices.Symbol     ) ) AS Price ON c.Symbol = Price.Symbol JOIN (     SELECT Symbol, NetIncome AS Amount     FROM Financials     WHERE Date = (         SELECT MAX(Date)         FROM Financials         WHERE Symbol = Financials.Symbol     ) ) AS Earnings ON c.Symbol = Earnings.Symbol WHERE (Price.Amount / Earnings.Amount) > (     SELECT AVG(PERatio)     FROM (         SELECT c2.Symbol, (Price2.Amount / Earnings2.Amount) AS PERatio         FROM Companies c2         JOIN (             SELECT Symbol, ClosePrice AS Amount             FROM DailyStockPrices             WHERE Date = (                 SELECT MAX(Date)                 FROM DailyStockPrices                 WHERE Symbol = DailyStockPrices.Symbol             )         ) AS Price2 ON c2.Symbol = Price2.Symbol         JOIN (             SELECT Symbol, NetIncome AS Amount             FROM Financials             WHERE Date = (                 SELECT MAX(Date)                 FROM Financials                 WHERE Symbol = Financials.Symbol             )         ) AS Earnings2 ON c2.Symbol = Earnings2.Symbol         WHERE c2.Industry = c.Industry     ) AS t )         ",
        "SELECT c.Symbol, c.Name, (NetIncome.Amount / AvgAssets.Amount) AS ROA FROM Companies c JOIN (     SELECT Symbol, SUM(NetIncome) AS Amount     FROM Financials     WHERE Date BETWEEN DATE_SUB(CURDATE(), INTERVAL 12 MONTH) AND CURDATE()     GROUP BY Symbol ) AS NetIncome ON c.Symbol = NetIncome.Symbol JOIN (     SELECT Symbol, AVG(TotalAssets) AS Amount     FROM (         SELECT Symbol, TotalAssets         FROM BalanceSheet         WHERE Date BETWEEN DATE_SUB(CURDATE(), INTERVAL 12 MONTH) AND CURDATE()     ) AS t     GROUP BY Symbol ) AS AvgAssets ON c.Symbol = AvgAssets.Symbol ORDER BY ROA DESC LIMIT 10 "
    ]
}


